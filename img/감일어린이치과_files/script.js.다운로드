$(function(){
	$(document).ajaxSend(function(xhr) {
		is_ajax_run=true;
	});

	$( document ).ajaxComplete(function() {
		is_ajax_run=false;
	});
});

var is_ajax_run=false;
function ajaxRunnable(){
	if(is_ajax_run){
		alert("처리 중 입니다.");
		return false;
	} else {
		return true;
	}
}

function checkboxAllCheck(checked, name){
	$("input[name='"+name+"']").prop("checked",checked);
}

function isMobCheck() {
	return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
}

function validCheckReq(){
	var res=true;
	$(".req:visible").each(function(index, item){
		if($(this).val().replace(/\s+/g,"").length==0){
			if( $(item).prop("tagName")=="INPUT" )		alert( $(this).attr("title")+" 항목을 입력해 주세요." );
			if( $(item).prop("tagName")=="TEXTAREA" )	alert( $(this).attr("title")+" 항목을 입력해 주세요." );
			if( $(item).prop("tagName")=="SELECT" )		alert( $(this).attr("title")+" 항목을 선택해 주세요." );
			$(this).focus();
			res=false;
			return false;
		}
	});
	return res;
}

function validCheckCkBox(name){
	var res=true;
	if( $("input[type=checkbox][name='"+name+"']:checked.req:visible").length<1 ){
		alert($("input[type=checkbox][name='"+name+"']").eq(0).attr("title")+" 항목을 선택하세요.");
		$("input[type=checkbox][name='"+name+"']").eq(0).focus();
		res=false;
		return false;
	}
	return res;
}


function validCheckRadioBtn(name){
	var res=true;
	if( $("input[type=radio][name='"+name+"']:checked.req:visible").length<1 ){
		alert($("input[type=radio][name='"+name+"']").eq(0).attr("title")+" 항목을 선택하세요.");
		$("input[type=radio][name='"+name+"']").eq(0).focus();
		res=false;
		return false;
	}
	return res;
}

function formatCheckemail(obj) {
	var res=true;
	var regExp= /^[A-Za-z0-9_\.\-]+@[A-Za-z0-9\-]+\.[A-Za-z0-9\-]+/;
	var email=$(obj).val();
	if (regExp.test(email) == false) {
		alert("이메일주소의 형식이 올바르지 않습니다.");
		$(obj).focus();
		res=false;
		return false;
	}
	return res;
}

function formatCheckHp(obj) {
	var res=true;
	var regExp = /^\d{3}-\d{3,4}-\d{4}$/;
	var phoneNum=$(obj).val();
	if (regExp.test(phoneNum) == false) {
		alert("휴대폰번호의 형식이 올바르지 않습니다.");
		$(obj).focus();
		res=false;
		return false;
	}
	return res;
}

function formatCheckTel(obj) {
	var res=true;
	var regExp = /^\d{2,3}-\d{3,4}-\d{4}$/;
	var telNum=$(obj).val();
	if (regExp.test(telNum) == false) {
		alert("전화번호의 형식이 올바르지 않습니다.");
		$(obj).focus();
		res=false;
		return false;
	}
	return res;
}

function formatCheckPw(obj){
	//영문 + 숫자 + 6~12자리
	var res=true;
	var pw=$(obj).val();
	var reg1 = /^[a-z0-9]{6,12}$/;
	var reg2 = /[a-z]/g;    
	var reg3 = /[0-9]/g;
	if (!reg1.test(pw) || !reg2.test(pw) || !reg3.test(pw)) {
		alert("비밀번호 형식이 올바르지 않습니다.");
		$(obj).focus();
		res=false;
		return false;
	}
	return res;
}

function formatCheckBirth(obj){
	//숫자 8자리
	var res=true;
	var birth=$(obj).val();
	var regExp = /^[0-9]{8}$/;
	if (regExp.test(birth) == false) {
		alert("생년월일(8자리) 형식이 올바르지 않습니다.");
		$(obj).focus();
		res=false;
		return false;
	}
	return res;
}

function formatCheckThirdPointNumber(obj){
	//소수점3자리까지
	var res=true;
	var number=$(obj).val();
	var regExp1 = /^[0-9]*\.?[0-9]{1}$/;
	var regExp2 = /^[0-9]*\.?[0-9]{2}$/;
	var regExp3 = /^[0-9]*\.?[0-9]{3}$/;
	if ( !regExp1.test(number) && !regExp2.test(number) && !regExp3.test(number) ) {
		alert("형식이 올바르지 않습니다. (소수점 3자리 까지)");
		$(obj).focus();
		res=false;
		return false;
	}
	return res;
}

//쿠키 제어
function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+d.toUTCString();
    document.cookie = cname + "=" + cvalue + "; path=/; " + expires;
}

function getCookie(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i<ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0)==' ') c = c.substring(1);
        if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
    }
    return "";
}

function checkCookie(cname) {
    var ckValue = getCookie(cname);
    if (ckValue != "") {
        //todo
		return ckValue;
    } else {
        //todo
		return "";
    }
}

//주소검색
function foldDaumPostcode(target) {
	// iframe을 넣은 element를 안보이게 한다.
	document.getElementById(target).style.display = 'none';
}

function search_addr(target, zip, addr1, addr2) {
	// 우편번호 찾기 찾기 화면을 넣을 element
	var element_wrap = document.getElementById(target);

	// 현재 scroll 위치를 저장해놓는다.
	var currentScroll = Math.max(document.body.scrollTop, document.documentElement.scrollTop);
	new daum.Postcode({
		oncomplete: function(data) {
			// 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.

			// 각 주소의 노출 규칙에 따라 주소를 조합한다.
			// 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
			var addr = ''; // 주소 변수
			var extraAddr = ''; // 참고항목 변수

			//사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.
			if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우
				addr = data.roadAddress;
			} else { // 사용자가 지번 주소를 선택했을 경우(J)
				addr = data.jibunAddress;
			}

			// 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.
			if(data.userSelectedType === 'R'){
				// 법정동명이 있을 경우 추가한다. (법정리는 제외)
				// 법정동의 경우 마지막 문자가 "동/로/가"로 끝난다.
				if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){
					extraAddr += data.bname;
				}
				// 건물명이 있고, 공동주택일 경우 추가한다.
				if(data.buildingName !== '' && data.apartment === 'Y'){
					extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);
				}
				// 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.
				if(extraAddr !== ''){
					extraAddr = ' (' + extraAddr + ')';
				}
				// 조합된 참고항목을 해당 필드에 넣는다.
				//document.getElementById(addr_etc).value = extraAddr;
			
			} else {
				//document.getElementById(addr_etc).value = '';
			}

			// 우편번호와 주소 정보를 해당 필드에 넣는다.
			document.getElementById(zip).value = data.zonecode;
			document.getElementById(addr1).value = addr;
			// 커서를 상세주소 필드로 이동한다.
			document.getElementById(addr2).focus();

			// iframe을 넣은 element를 안보이게 한다.
			// (autoClose:false 기능을 이용한다면, 아래 코드를 제거해야 화면에서 사라지지 않는다.)
			element_wrap.style.display = 'none';

			// 우편번호 찾기 화면이 보이기 이전으로 scroll 위치를 되돌린다.
			document.body.scrollTop = currentScroll;
		},
		// 우편번호 찾기 화면 크기가 조정되었을때 실행할 코드를 작성하는 부분. iframe을 넣은 element의 높이값을 조정한다.
		onresize : function(size) {
			element_wrap.style.height = size.height+'px';
		},
		width : '100%',
		height : '100%'
	}).embed(element_wrap);

	// iframe을 넣은 element를 보이게 한다.
	element_wrap.style.display = 'block';
}

//첨부파일 다운로드(파일경로,파일명)
function FileDown(Path, File, Org){
	location.href="../common/filedown.php?Path="+Path+"&File="+File+"&Org="+Org;
}